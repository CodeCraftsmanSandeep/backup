// timer interrupt
loadi(4, 17);
loadi(5, 18);

// eXpos library
loadi(63 ,13);
loadi(64 ,14);

// init code (even)
loadi(65,7);
loadi(66,8);

// odd code
loadi(83, 69);

// prime code
loadi(91, 70);

// int=10 exit code
loadi(22,35);
loadi(23,36);

// exception handler
loadi(2, 15);
loadi(3, 16);

// interrupt 7 write
loadi(16, 29);
loadi(17, 30);

// mod 5
loadi(50, 63);
loadi(51, 64);

alias i R0;
i = 0;
while ( i < MAX_PROC_NUM) do
	[PROCESS_TABLE + i*16 + 4] = TERMINATED;
	i = i + 1;
endwhile;

// init
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;
// libraray
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

// code 4 pages
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// stack 2 pages
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

// pid 1
[PROCESS_TABLE + 16 + 1] = 1;

// STATE
[PROCESS_TABLE + 16 + 4] = CREATED;

// user area pages
[PROCESS_TABLE + 16 + 11] = 80;

// KPTR
[PROCESS_TABLE + 16 + 12] = 0;

// UPTR
[PROCESS_TABLE + 16 + 13] = 8*512;

// PTBR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;

// PTLR
[PROCESS_TABLE + 16 + 15] = 10;

[76*512] = [65*512 + 1];

// odd code
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;
// libraray
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 87;
[PTBR+5] = "0100";
[PTBR+6] = 88;
[PTBR+7] = "0100";

// code 4 pages
[PTBR+8] = 83;
[PTBR+9] = "0100";
[PTBR+10] = 84;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// stack 2 pages
[PTBR+16] = 85;
[PTBR+17] = "0110";
[PTBR+18] = 86;
[PTBR+19] = "0110";

// pid 2
[PROCESS_TABLE + 2*16 + 1] = 2;

// STATE
[PROCESS_TABLE + 2*16 + 4] = CREATED;

// user area pages
[PROCESS_TABLE + 16*2 + 11] = 89;

// KPTR
[PROCESS_TABLE + 16*2 + 12] = 0;

// UPTR
[PROCESS_TABLE + 16*2 + 13] = 8*512;

// PTBR
[PROCESS_TABLE + 16*2 + 14] = PAGE_TABLE_BASE + 40;

// PTLR
[PROCESS_TABLE + 16*2 + 15] = 10;

[85*512] = [83*512 + 1];


// prime code
PTBR = PAGE_TABLE_BASE + 60;
PTLR = 10;
// libraray
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = 95;
[PTBR+5] = "0100";
[PTBR+6] = 90;
[PTBR+7] = "0100";

// code 4 pages
[PTBR+8] = 91;
[PTBR+9] = "0100";
[PTBR+10] = 92;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// stack 2 pages
[PTBR+16] = 93;
[PTBR+17] = "0110";
[PTBR+18] = 94;
[PTBR+19] = "0110";

// pid 2
[PROCESS_TABLE + 3*16 + 1] = 3;

// STATE
[PROCESS_TABLE + 3*16 + 4] = CREATED;

// user area pages
[PROCESS_TABLE + 16*3 + 11] = 96;

// KPTR
[PROCESS_TABLE + 16*3 + 12] = 0;

// UPTR
[PROCESS_TABLE + 16*3 + 13] = 8*512;

// PTBR
[PROCESS_TABLE + 16*3 + 14] = PAGE_TABLE_BASE + 60;

// PTLR
[PROCESS_TABLE + 16*3 + 15] = 10;

[93*512] = [91*512 + 1];
return;
