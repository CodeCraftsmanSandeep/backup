[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + 16 * currentPID;

[process_table_entry + 12] = SP % 512; // KTPR
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY; // state

// handling
alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
else
	if(currentPID == 1) then
		newPID = 2;
	else 
		newPID = 0;
	endif;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

SP =  [new_process_table + 11] * 512 + [new_process_table + 12]; // kernal SP
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;
[new_process_table + 4] = RUNNING;

if([new_process_table + 4] == CREATED) then
	SP = [new_process_table + 13];
	ireturn;
endif;

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
ireturn;
