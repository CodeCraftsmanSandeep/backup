// set current process mode flag to 5 (write sys call number)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 5;


alias userSP R0;
userSP = SP;

// storing SP in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;

// kernal stack address to SP
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescriptor R3;
alias word R4;
alias returnvalue R5;

// getting file descriptor (1st argument)
physicalPageNum = [PTBR + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
fileDescriptor = [physicalPageNum * 512 + offset];

if (fileDescriptor != -2)
then
	returnvalue = -1; // failure
else
	// getting word (2nd argument)
	physicalPageNum = [PTBR + 2 * ((userSP - 3) / 512)];
	offset = (userSP - 3) % 512;
	word = [physicalPageNum * 512 + offset];
	print word;
	returnvalue = 0; // success
endif;

physicalPageNum = [PTBR + 2 * ((userSP - 1) / 512)];
offset = (userSP - 1) % 512;
[physicalPageNum * 512 + offset] = returnvalue;

SP = userSP; // restoring the stack pointer
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0; // mode flag set to 0
ireturn; // control back to user_program
